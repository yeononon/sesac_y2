/* Container 속성 */
.container {
    /* width: 300px; */
    width: 400px;
    height: 450px;
    background-color: #333;
    margin: 0 auto;
    display: flex;
    /* 부모 요소에 "felx"를 선언하면, 아이템 (자식)이 가로 방향으로 배치 */
    /* 
          FlexBox 기본 용어
          * 주축 (Main Axis)
          - Flex 컨테이너 내에서 Flex 아이템들이 배치되는 기본 방향을 나타내는 축.
          * 교차축 (Cross Axis)
          - 주축에 수직인 축.
      */
    /*  
          #1. flex-direction : flex 방향을 설정 (주축 방향 설정)
          - row (default) : 수평 정렬 (좌 -> 우)
          - row-reverse : 수평 정렬 (우 -> 좌)
          - column : 수직 정렬 (위 -> 아래)
          - column-reverse : 수직 정렬 (아래 -> 위)
      */
    /* row 일 때 */
    /* flex-direction: row; */
    /* flex-direction: row-reverse; */
    /* column 일 때 */
    /* flex-direction: column; */
    /* flex-direction: column-reverse; */
    /* 
      #2. justify-content : 주축을 따라 아이템을 어떻게 배치할 것인지?
      - flex-direction이 수평 정렬; 주축 = row (가로)
      - flex-direction이 수직 정렬; 주축 = column (세로)
      - flex-start (default): 아이템을 주축에 대해서 start 지점을 기준으로 나열
      - flex-end : 아이템을 주축에 대해서 end 지점을 기준으로 나열
      - space-between : 처음과 마지막 아이템을 양 끝에 붙이고 나머지 영역을 공평하게 나눔.
      - space-around : 아이템들의 모든 여백을 공평하게 갖도록 함
          - 양끝 영역의 단위가 1이라면, 나머지 영역의 단위는 2
      - space-evenly : start부터 첫 아이템의 간격, 아이템 끼리의 간격, 마지막 아이템 부터 end까지의 모든 간격이 일정
      */
    /* justify-content: flex-start; */
    /* justify-content: flex-end; */
    /* justify-content: center; */
    /* justify-content: space-between; */
    /* justify-content: space-around; */
    /* justify-content: space-evenly; */
    /* 
      #3. align-items : 교차축에 대해서 아이템을 어떻게 배치할 것인지?
      - flex-direction이 수평 정렬; 교차축 = column (세로)
      - flex-direction이 수직 정렬; 교차축 = row (가로)
      - stretch (default) : container의 교차축을 채우기 위해 늘림.
      - 지금은 width, height가 지정되어 있어서 안됨.
      - flex-start : 교차축에 대하여 시작점으로 정렬.
      - flex-end : 교차축에 대하여 끝점으로 정렬.
      - center : 교차축에 대하여 가운데 정렬.
      - baseline : 아이템을 텍스트의 베이스라인을 기준으로 정렬.
    */
    /* align-items: stretch; */
    /* align-items: flex-start; */
    /* align-items: flex-end; */
    /* align-items: center; */
    /* align-items: baseline; */
    /* 
      #4. flex-wrap : 줄바꿈 (개행) 처리
      -> 컨테이너(부모)가 한 줄에 아이템을 다 수용하지 못할 때, 줄바꿈 관련 설정
      - nowrap (default) : 줄바꿈 안함.
      - wrap : 줄바꿈 함.
      - wrap-reverse : 줄바꿈 하는데 아이템을 역순 배치.
    */
    /* flex-wrap: nowrap; */
    /* flex-wrap: wrap; */
    /* flex-wrap: wrap-reverse; */
    /* 
      #5. align-content : 여러 행에 대한 정렬.
      - (조건) flex-wrap : wrap / wrap-reverse 상태에서 아이템이 두 줄 이상일 때 교차축 방향 설정함.
    */
    /* align-content: stretch; */
    /* align-content: flex-start; */
    /* align-content: flex-end; */
    /* align-content: center; */
    /* align-content: space-between; */
    /* align-content: space-around; */
    /* align-content: space-evenly; */
  }
  /* ------------------------------- */
  /* Item 속성! */
  /* 
      order : 요소의 배치 순서를 제어하는 속성.
      - 0 (default) : order를 설정하지 않은 아이템들이 먼저 순서대로 배치
      - 값 변경 : 숫자가 작은 값일수록 앞 배치!
  */
  /* 
      align-self : Item이 "컨테이너의 교차축(세로)"에서 어떻게 배치할 것인지?
      - 각 항목에 대해 개별적으로 설정할 수 있다.
      - stretch (default) : container의 교차축을 채우기 위해 늘림.
      - flex-start / flex-end / center 이하 동일.
  */
  /* 
      flex-basis : 항목의 "기본 크기"를 지정하는데 사용.
      - flex-grow / flex-shrink 와 결합하여 전체적인 크기 조정에 영향.
      - * width와 height는 기본 크기를 설정하지만, Flexbox 레이아웃에서는 flex-basis가 우선 적용!
      - 단위 (px, rem, %) 사용 가능
      - auto (default) : 컨텐츠의 크기 기준
          - auto 일땐 width, height 우선 / 아닐 때는 flex-basis 우선
      - 0 : 기본 크기를 0 으로 설정 -> flex-grow, flex-shrink 활용.
  */
  /* 
      flex-grow : 항목이 남는 공간을 얼마나 확장할지 결정.
          - 0 (default)
      flex-shrink : 항목이 부족한 공간에서 얼마나 축소될지 결정.
          - 1 (defalut)
          - 요소의 너비의 영향을 많이 받기에 계산이 까다로움 (*활용도가 떨어짐)
      * 단축 속성 *
      flex: flex-grow | flex-shrink | flex-basis
              증가너비 | 감소너비 | 기본너비
      * 생략 *
      flex: 1  ==> flex-grow: 1; 나머지 기본 값.
  */
  .items {
    width: 100px;
    height: 100px;
    font-weight: 700;
    text-align: center;
    line-height: 100px;
  }
  .item1 {
    background-color: red;
    font-size: 10px;
    /* order: 5; */
    /* align-self: stretch; */
    /* flex-basis: 200px; */
    /* flex: 2 1 200px; */
    flex-grow: 1;
  }
  .item2 {
    background-color: orange;
    font-size: 15px;
    /* order: 3; */
    /* align-self: flex-start; */
    /* flex-basis: 150px; */
    flex-grow: 3;
  }
  .item3 {
    background-color: yellow;
    font-size: 20px;
    /* order: 1; */
    /* align-self: flex-end; */
    flex-grow: 1;
  }
  .item4 {
    background-color: green;
    font-size: 25px;
    /* order: 4; */
    /* align-self: center; */
  }
  .item5 {
    background-color: blue;
    font-size: 30px;
  }
  감소너비 - shrink
요소의 너비에 영향을 받습니다.
Container의 너비가 줄어 Items의 너비에 영향.
- 영향을 미치기 시작한 지점부터 줄어든 거리 만큼 감소 너비 비율에 맞게 Item 너비가
 줄어듬.
ex) Container의 너비가 줄어 Item의 너비에 영향을 미치기 시작한 지점부터
실제 줄어든 거리가 90px 일 때,
요소 너비가 같은 Item이 2개이고 지정된 감소너비가 각각 2와 1
shrink이 너비는 2:1 비율이며,
첫 번째 item은 90px의 2/3인 60px 만큼 너비가 감소하고,
두 번째 item은 90px의 1/3인 30px 만큼 너비가 감소합니다.
ex2) Container의 너비가 줄어 Item의 너비에 영향을 미치기 시작한 지점부터 실제 줄어든 거리가 90px 일 때,
요소 너비가 다른 Item이 2개이고
너비는 각각 200 과 100이라고 가정했습니다.
지정된 감소너비가 각각 2와 1이라면
shrink 2 / 1
200 x 2 = 400
100 x 1 = 100
즉, 감소너비 4 : 1
첫 번째 Item은 90px의 4/5인 72px 만큼 너비가 감소
두 번째 item은 90px의 1/5인 18px 만큼 너비가 감소합니다.